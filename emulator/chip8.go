package emulator

type Chip8 struct {
	memory     [4096]byte
	V          [16]byte
	I          uint16
	pc         uint16
	stack      [16]uint16
	sp         uint16
	Gfx        [64 * 32]byte
	DrawFlag   bool
	DelayTimer int
	SoundTimer int
	key        [16]byte
}

func NewChip8() *Chip8 {
	c := &Chip8{}
	c.pc = 0x200

	var fonts = [80]byte{
		0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
		0x20, 0x60, 0x20, 0x20, 0x70, // 1
		0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
		0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
		0x90, 0x90, 0xF0, 0x10, 0x10, // 4
		0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
		0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
		0xF0, 0x10, 0x20, 0x40, 0x40, // 7
		0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
		0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
		0xF0, 0x90, 0xF0, 0x90, 0x90, // A
		0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
		0xF0, 0x80, 0x80, 0x80, 0xF0, // C
		0xE0, 0x90, 0x90, 0x90, 0xE0, // D
		0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
		0xF0, 0x80, 0xF0, 0x80, 0x80, // F
	}

	for i := range len(fonts) {
		c.memory[i+0x050] = fonts[i]
	}

	return c
}

func (c *Chip8) SetKey(i byte, down bool) {
	if down {
		c.key[i] = 1
	} else {
		c.key[i] = 0
	}
}
